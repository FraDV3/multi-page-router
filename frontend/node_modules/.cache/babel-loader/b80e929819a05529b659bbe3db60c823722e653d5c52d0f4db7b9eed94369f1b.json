{"ast":null,"code":"var _jsxFileName = \"/Users/Francesco/Udemy/React/projects/multi-page-router/12-adv-starting-project/frontend/src/pages/EventsPage.js\",\n  _s = $RefreshSig$();\nimport { Await, defer, useLoaderData } from \"react-router-dom\";\nimport \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Await, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 10\n  }, this);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nexport async function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // return { isError: true, message: \"Could not fetch events.\" };\n    // throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\n    //   status: 500,\n    // });\n    throw json({\n      message: \"Could not fetch events.\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["Await","defer","useLoaderData","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","data","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","json","message","status","loader","events","$RefreshReg$"],"sources":["/Users/Francesco/Udemy/React/projects/multi-page-router/12-adv-starting-project/frontend/src/pages/EventsPage.js"],"sourcesContent":["import { Await, defer, useLoaderData } from \"react-router-dom\";\nimport {  } from \"react-router-dom\";\n\nimport EventsList from \"../components/EventsList\";\n\nfunction EventsPage() {\n  const data = useLoaderData();\n\n  return <Await />;\n}\n\nexport default EventsPage;\n\nexport async function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // return { isError: true, message: \"Could not fetch events.\" };\n    // throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\n    //   status: 500,\n    // });\n    throw json({ message: \"Could not fetch events.\" }, { status: 500 });\n  } else {\n    return response;\n  }\n}\n\nexport function loader() {\n  return defer({\n    events: loadEvents(),\n  });\n}\n"],"mappings":";;AAAA,SAASA,KAAK,EAAEC,KAAK,EAAEC,aAAa,QAAQ,kBAAkB;AAC9D,OAAiB,kBAAkB;AAEnC,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAAGN,aAAa,CAAC,CAAC;EAE5B,oBAAOG,OAAA,CAACL,KAAK;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAClB;AAACL,EAAA,CAJQD,UAAU;EAAA,QACJJ,aAAa;AAAA;AAAAW,EAAA,GADnBP,UAAU;AAMnB,eAAeA,UAAU;AAEzB,OAAO,eAAeQ,UAAUA,CAAA,EAAG;EACjC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;IACA,MAAMC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACrE,CAAC,MAAM;IACL,OAAOL,QAAQ;EACjB;AACF;AAEA,OAAO,SAASM,MAAMA,CAAA,EAAG;EACvB,OAAOpB,KAAK,CAAC;IACXqB,MAAM,EAAER,UAAU,CAAC;EACrB,CAAC,CAAC;AACJ;AAAC,IAAAD,EAAA;AAAAU,YAAA,CAAAV,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}